name: Reusable Docker Build and Push
on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: 'ubuntu-latest'
        description: "Runner to use for the workflow"
      project_name:
        required: false
        type: string
        description: "Project name"
      image_name:
        required: true
        type: string
        description: "Docker image name"
      platforms:
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
        description: "Platforms to build for"
      context_path:
        required: false
        type: string
        default: 'src'
        description: "Docker build context path"
      dockerfile_path:
        required: false
        type: string
        default: 'Dockerfile'
        description: "Path to Dockerfile relative to repository root"
      push_to_dockerhub:
        required: false
        type: boolean
        default: true
        description: "Push to Docker Hub registry"
      push_to_ghcr:
        required: false
        type: boolean
        default: true
        description: "Push to GitHub Container Registry"
    secrets:
      DOCKER_USERNAME:
        required: false
        description: "Docker Hub username"
      DOCKER_TOKEN:
        required: false
        description: "Docker Hub access token"
      ENCRYPTION_KEY:
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ inputs.image_name }}-${{ github.ref }}
  cancel-in-progress: false
jobs:
  build-and-push:
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: write
      packages: write
      actions: write
    steps:
      - name: Log event name
        run: |
          echo "Event name: ${{ github.event_name }}"
      - name: Determine trigger type
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "Workflow triggered by a push event."
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Workflow triggered by manual dispatch."
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Workflow triggered by a scheduled event."
          else
            echo "Workflow triggered by an unknown event: ${{ github.event_name }}"
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: dubloksoftware/workflows
          ref: main
          path: workflows
      - name: Setup workflow files
        run: |
          mkdir -p repo/.github/workflows/build-and-push
          cp -r workflows/.github/workflows/build-and-push/* repo/.github/workflows/build-and-push/
          cd repo
      - name: Update version
        id: version
        working-directory: repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          pip install requests
          chmod +x .github/workflows/build-and-push/update_version.py
          .github/workflows/build-and-push/update_version.py
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: inputs.push_to_dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Log in to GitHub Container Registry
        if: inputs.push_to_ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate Docker Tags
        id: meta
        working-directory: repo
        env:
          TAGS_JSON: ${{ steps.version.outputs.tags }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ inputs.image_name }}
          REPO_OWNER: ${{ github.repository_owner }}
          PUSH_TO_DOCKERHUB: ${{ inputs.push_to_dockerhub }}
          PUSH_TO_GHCR: ${{ inputs.push_to_ghcr }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          chmod +x .github/workflows/build-and-push/generate_docker_tags.py
          .github/workflows/build-and-push/generate_docker_tags.py
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: repo/${{ inputs.context_path }}
          file: repo/${{ inputs.dockerfile_path }}
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.sha_tag }}
          labels: |
            org.opencontainers.image.title=${{ inputs.image_name }}
            org.opencontainers.image.version=${{ steps.version.outputs.full_version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
      - name: List existing Docker images
        run: |
          echo "Listing existing Docker images:"
          docker images
      - name: Save Docker image
        run: |
          set -e # Exit on any error
          VERSION="${{ steps.version.outputs.full_version }}"
          IMAGE_TAG="${{ steps.meta.outputs.sha_tag }}"
          
          echo "Pulling image: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          
          echo "Saving image: $IMAGE_TAG"
          docker save $IMAGE_TAG -o "${{ inputs.image_name }}.tar"
      - name: List existing Docker images
        run: |
          echo "Listing existing Docker images:"
          docker images
      - name: Generate SBOM
        working-directory: repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.meta.outputs.sha_tag }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          chmod +x .github/workflows/build-and-push/generate_sbom.py
          .github/workflows/build-and-push/generate_sbom.py
      - name: List existing Docker images
        run: |
          echo "Listing existing Docker images:"
          docker images
      - name: Compare SBOMs
        working-directory: repo
        id: compare_sboms
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          echo "Comparing SBOMs"
          chmod +x .github/workflows/build-and-push/compare_sboms.py
          .github/workflows/build-and-push/compare_sboms.py
      - name: Cancel workflow
        if: github.event_name == 'schedule' && steps.compare_sboms.outputs.new_sbom == 'false'
        working-directory: repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cancelling workflow"
          chmod +x .github/workflows/build-and-push/cancel_workflow.py
          .github/workflows/build-and-push/cancel_workflow.py

      - name: Generate Vulnerability Report
        working-directory: repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.meta.outputs.sha_tag }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          chmod +x .github/workflows/build-and-push/generate_vulnerability_report.py
          .github/workflows/build-and-push/generate_vulnerability_report.py
      - name: List existing Docker images
        run: |
          echo "Listing existing Docker images:"
          docker images
      - name: Commit generated files
        working-directory: repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.full_version }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          chmod +x .github/workflows/build-and-push/commit_files.py
          .github/workflows/build-and-push/commit_files.py
      - name: Create Release
        id: release
        working-directory: repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          chmod +x .github/workflows/build-and-push/publish_release.py
          .github/workflows/build-and-push/publish_release.py
      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.full_version }}
          IMAGE_NAME: ${{ inputs.image_name }}
          PROJECT_NAME: ${{ inputs.project_name }}
        working-directory: repo
        run: |
          chmod +x .github/workflows/build-and-push/upload_release_assets.py
          .github/workflows/build-and-push/upload_release_assets.py
      - name: Tag and push additional tags
        working-directory: repo
        env:
          IMAGE_TAG: ${{ steps.meta.outputs.sha_tag }}
          ADDITIONAL_TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          IFS=',' read -ra TAGS <<< "$ADDITIONAL_TAGS"
          for TAG in "${TAGS[@]}"; do
            TAG=$(echo $TAG | xargs)
            if [ "$TAG" != "$IMAGE_TAG" ]; then
              echo "Creating manifest and pushing: $TAG"
              docker buildx imagetools create -t "$TAG" "$IMAGE_TAG"
            fi
          done