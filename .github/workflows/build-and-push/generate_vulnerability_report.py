#!/usr/bin/env python3
import os
import sys
import logging
import subprocess
from pathlib import Path

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def docker_login():
    """Login to GitHub Container Registry."""
    try:
        github_token = os.environ['GITHUB_TOKEN']
        github_actor = os.environ['GITHUB_ACTOR']
        login_cmd = [
            'docker', 'login', 'ghcr.io',
            '-u', github_actor,
            '--password-stdin'
        ]
        subprocess.run(
            login_cmd,
            input=github_token.encode(),
            check=True,
            capture_output=True
        )
        logger.info("Successfully logged in to GitHub Container Registry")
    except Exception as e:
        logger.error(f"Failed to login to GitHub Container Registry: {e}")
        raise

def generate_vulnerability_report():
    """Generate vulnerability report using Trivy."""
    try:
        image_tag = os.environ['IMAGE_TAG']
        # Get optional project name
        project_name = os.environ.get('PROJECT_NAME', '')
        
        # Generate report filename based on project name
        report_filename = f'.vulnerability_report_{project_name}.txt' if project_name else '.vulnerability_report.txt'
        
        trivy_cmd = [
            'docker', 'run', '--rm',
            '-v', '/var/run/docker.sock:/var/run/docker.sock',
            '-v', 'vulnerability_cache_volume:/root/.cache/',
            '-v', f'{os.getcwd()}:/reports',
            'ghcr.io/aquasecurity/trivy:latest',
            '--db-repository', 'ghcr.io/aquasecurity/trivy-db:latest',
            'image',
            '--format', 'table',
            '--output', f'/reports/{report_filename}',
            image_tag
        ]
        
        # Log the environment variables and command
        logger.info(f"IMAGE_TAG: {image_tag}")
        logger.info(f"trivy_cmd: {trivy_cmd}")
        subprocess.run(trivy_cmd, check=True)
        logger.info("Successfully generated vulnerability report")
        
        # Log the location of the generated vulnerability report
        report_path = Path(os.getcwd()) / report_filename
        logger.info(f"Generated vulnerability report location: {report_path}")
    except Exception as e:
        logger.error(f"Failed to generate vulnerability report: {e}")
        raise

def main():
    """Main function to orchestrate vulnerability report generation."""
    try:
        docker_login()
        generate_vulnerability_report()
    except Exception as e:
        logger.error(f"Vulnerability report generation failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()